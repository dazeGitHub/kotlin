package

public fun contains(/*0*/ x: Entity): kotlin.Boolean
public fun filter(/*0*/ predicate: (Container) -> kotlin.Boolean): kotlin.Unit
public fun test(): kotlin.Unit

public final class Container {
    public constructor Container()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final operator fun </*0*/ R> get(/*0*/ prop: kotlin.reflect.KProperty1<Item, R>): R
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Entity {
    public constructor Entity()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Item {
    public constructor Item(/*0*/ id: Entity)
    public final val id: Entity
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
